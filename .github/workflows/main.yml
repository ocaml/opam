name: Builds, tests & co

on:
  pull_request:
  push:

env:
  OPAMBSVERSION: 2.1.0
  OPAMBSROOT: ~/.cache/.opam.cached
  OPAM12CACHE: ~/.cache/opam1.2/cache
  OPAM_REPO: https://github.com/ocaml/opam-repository.git
  OPAM_TEST_REPO_SHA: e9ce8525130a382fac004612302b2f2268f4188c
  OPAM_REPO_SHA: e9ce8525130a382fac004612302b2f2268f4188c
  SOLVER:
  CYGWIN_MIRROR: http://mirrors.kernel.org/sourceware/cygwin/
  CYGWIN_ROOT: D:\cygwin
  CYGWIN: winsymlinks:native
  CYGWIN_EPOCH: 4

permissions:
  pull-requests: write
  issues: write
  contents: read

defaults:
  run:
    shell: bash

jobs:

  Depends-Linux:
    runs-on: ubuntu-latest
    needs: [  ]
    strategy:
      matrix:
        ocamlv: [ 4.14.2, 5.3.0 ]
      fail-fast: false
    env:
      OPAM_DEPENDS: 1
    permissions:
      pull-requests: write
      issues: write
      contents: read
    steps:
    - name: Install bubblewrap
      run: sudo apt install bubblewrap
    - name: Disable AppArmor
      run: echo 0 | sudo tee /proc/sys/kernel/apparmor_restrict_unprivileged_userns
    - name: Checkout tree
      uses: actions/checkout@v5
    - name: src_ext/archives and opam-repository Cache
      id: archives
      uses: actions/cache@v4
      with:
        path: |
          src_ext/archives
          ~/opam-repository
        key: ${{ needs.Analyse.outputs.archives }}
        enableCrossOsArchive: true
    - name: OCaml ${{ matrix.ocamlv }} Cache
      id: ocaml-cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/ocaml-local/**
        key: ${{ runner.os }}-ocaml-${{ matrix.ocamlv }}-${{ needs.Analyse.outputs.ocaml-cache }}
    - name: Create OCaml ${{ matrix.ocamlv }} cache
      if: steps.ocaml-cache.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/ocaml-cache.sh ${{ runner.os }} ${{ matrix.ocamlv }}
    - name: opam bootstrap Cache
      id: opam-bootstrap
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.OPAMBSROOT }}/**
          ~/.cache/opam-local/bin/**
        key: opamdepends-${{ runner.os }}-${{ env.OPAMBSVERSION }}-${{ matrix.ocamlv }}-${{ env.OPAM_REPO_SHA }}-${{ needs.Analyse.outputs.opam-bs-cache }}
    - name: Create opam bootstrap cache
      if: steps.opam-bootstrap.outputs.cache-hit != 'true'
      run: bash -exu .github/scripts/main/opam-bs-cache.sh
    - name: Get job ID
      id: get-job-id
      uses: actions/github-script@v7
      env:
        OCAMLV: ${{ matrix.ocamlv }}
      with:
        script: |
          const run_id = context.runId;
          const jobs = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id
          });
          const currentJobName = process.env.GITHUB_JOB;
          const matrixOCaml = process.env.OCAMLV;
          const thisJob = jobs.data.jobs.find(j =>
            j.name.includes(currentJobName) && j.name.includes(matrixOCaml)
          );
          core.setOutput("job_url", thisJob.html_url);
    - name: Compile
      env:
        BASE_REF_SHA: ${{ github.event.pull_request.base.sha }}
        PR_REF_SHA: ${{ github.event.pull_request.head.sha }}
        GITHUB_PR_USER: ${{ github.event.pull_request.user.login }}
        JOB_URL: ${{ steps.get-job-id.outputs.job_url }}
        FAIL_IF_DEPENDENT: opam-publish opam-rt opam-build opam-test
      run: bash -exu .github/scripts/main/main.sh x86_64-pc-linux-gnu
    - name: Comment or update PR with reverse dependency testing results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        OCAMLV: ${{ matrix.ocamlv }}
      with:
        script: |
          const version = process.env.OCAMLV;
          const vkey = version.replace(/\./g, "_");
          const errorRaw = process.env[`LIB_ERRORS_${vkey}`];
          const all = process.env[`ALL_PROJECTS_${vkey}`];
          const ocamlver = process.env.OCAMLVER;
          const commit = process.env.PR_REF_SHA;
          const marker = `<!-- ocaml-${vkey}-error -->`;
          const lines = [marker];
          if (all) { lines.push(`Tested projects: ${all}`); }
          lines.push(`OCaml version: ${ocamlver}. Commit: ${commit}.`);
          if (errorRaw) {
            lines.push(`${errorRaw}`);
          }
          const body = lines.join("\n");
          if (lines.length < 2) return;
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request.number
          });
          const existing = comments.data.find(c => c.body.startsWith(marker));
          if (existing) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existing.id,
              body
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
          }
